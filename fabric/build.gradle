plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply from: 'https://raw.githubusercontent.com/CodinGlitch/gradle-templates/main/site-publishers/curseforge.gradle'
apply from: 'https://raw.githubusercontent.com/CodinGlitch/gradle-templates/main/site-publishers/modrinth.gradle'

base {
    archivesName = "${mod_name}-fabric-${minecraft_version}"
}
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")

    implementation "com.codinglitch.lexiconfig:lexiconfig-api:${lexiconfig_version}"

    implementation "de.maxhenkel.voicechat:voicechat-api:${voicechat_api_version}"
    modRuntimeOnly "maven.modrinth:simple-voice-chat:fabric-${minecraft_version}-${voicechat_version}"

    compileOnly annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.3.6")

    // -- Compatibilities -- \\

    // Voice Chat Interaction
    modCompileOnly "maven.modrinth:voice-chat-interaction:fabric-${minecraft_version}-${voicechat_interaction_version}"
    modCompileOnly include("eu.pb4:polymer-reg-sync-manipulator:${polymer_version}+${minecraft_version}")
    //modRuntimeOnly "maven.modrinth:voice-chat-interaction:fabric-${minecraft_version}-${voicechat_interaction_version}"
    //modRuntimeOnly include("eu.pb4:polymer-reg-sync-manipulator:${polymer_version}+${minecraft_version}")

    // Vibrative Voice
    implementation "com.codinglitch.vibrativevoice:vibrativevoice-api:${vibrative_voice_version}"
    //modCompileOnly "maven.modrinth:vibrative-voice:${vibrative_voice_version}"
    //modRuntimeOnly "maven.modrinth:vibrative-voice:${vibrative_voice_version}"

    // Valkyrien Skies
    modCompileOnly("org.valkyrienskies:valkyrienskies-${minecraft_version.replace('.','')}-fabric:${valkyrien_skies_version}")
    //modRuntimeOnly("org.valkyrienskies:valkyrienskies-${minecraft_version.replace('.','')}-fabric:${valkyrien_skies_version}")

    // JEI / REI
    if (recipe_viewer == "jei") {
        // compile against the JEI API but do not include it at runtime
        modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
        modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")
        // at runtime, use the full JEI jar for Fabric
        modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")
    } else if (recipe_viewer == "rei") {
        // TODO: add rei to devenv
    }
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../common/src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "build/datagen"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
